// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/Casper-Mars/cloud-restaurant/app/interface/internal/biz"
	"github.com/Casper-Mars/cloud-restaurant/app/interface/internal/conf"
	"github.com/Casper-Mars/cloud-restaurant/app/interface/internal/data"
	"github.com/Casper-Mars/cloud-restaurant/app/interface/internal/server"
	"github.com/Casper-Mars/cloud-restaurant/app/interface/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, auth *conf.Auth, logger log.Logger) (*kratos.App, func(), error) {
	userClient := biz.NewUserClient()
	authUsecase := biz.NewAuthUsecase(logger, userClient)
	authService := service.NewAuthService(authUsecase, logger)
	healthUsecase := biz.NewHealthUsecase(userClient)
	healthService := service.NewHealthService(healthUsecase)
	userUsecase := biz.NewUserUsecase(userClient)
	userService := service.NewUserService(userUsecase)
	foodClient := biz.NewFoodClient()
	foodUsecase := biz.NewFoodUsecase(logger, foodClient)
	foodService := service.NewFoodService(logger, foodUsecase)
	commentClient := biz.NewCommentClient()
	client := data.NewEsClient(confData)
	dataData, cleanup, err := data.NewData(logger, client)
	if err != nil {
		return nil, nil, err
	}
	commentUsecase := biz.NewCommentUsecase(logger, userClient, foodClient, commentClient, dataData)
	commentService := service.NewCommentService(commentUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, auth, logger, authService, healthService, userService, foodService, commentService)
	grpcServer := server.NewGRPCServer(confServer, auth, authService, userService, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
