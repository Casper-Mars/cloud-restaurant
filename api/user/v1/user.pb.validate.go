// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on AddUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for Password

	return nil
}

// AddUserReqValidationError is the validation error returned by
// AddUserReq.Validate if the designated constraints aren't met.
type AddUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserReqValidationError) ErrorName() string { return "AddUserReqValidationError" }

// Error satisfies the builtin error interface
func (e AddUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserReqValidationError{}

// Validate checks the field values on UserModifyResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserModifyResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UserModifyRespValidationError is the validation error returned by
// UserModifyResp.Validate if the designated constraints aren't met.
type UserModifyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserModifyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserModifyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserModifyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserModifyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserModifyRespValidationError) ErrorName() string { return "UserModifyRespValidationError" }

// Error satisfies the builtin error interface
func (e UserModifyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserModifyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserModifyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserModifyRespValidationError{}

// Validate checks the field values on OnePageUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OnePageUserReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPageIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnePageUserReqValidationError{
				field:  "PageIndex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPageSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnePageUserReqValidationError{
				field:  "PageSize",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnePageUserReqValidationError{
				field:  "Phone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OnePageUserReqValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OnePageUserReqValidationError is the validation error returned by
// OnePageUserReq.Validate if the designated constraints aren't met.
type OnePageUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnePageUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnePageUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnePageUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnePageUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnePageUserReqValidationError) ErrorName() string { return "OnePageUserReqValidationError" }

// Error satisfies the builtin error interface
func (e OnePageUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnePageUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnePageUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnePageUserReqValidationError{}

// Validate checks the field values on UserListResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserListResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UserListRespValidationError is the validation error returned by
// UserListResp.Validate if the designated constraints aren't met.
type UserListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListRespValidationError) ErrorName() string { return "UserListRespValidationError" }

// Error satisfies the builtin error interface
func (e UserListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListRespValidationError{}

// Validate checks the field values on UserListResp_UserListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserListResp_UserListItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for Name

	return nil
}

// UserListResp_UserListItemValidationError is the validation error returned by
// UserListResp_UserListItem.Validate if the designated constraints aren't met.
type UserListResp_UserListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListResp_UserListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListResp_UserListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListResp_UserListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListResp_UserListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListResp_UserListItemValidationError) ErrorName() string {
	return "UserListResp_UserListItemValidationError"
}

// Error satisfies the builtin error interface
func (e UserListResp_UserListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListResp_UserListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListResp_UserListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListResp_UserListItemValidationError{}
