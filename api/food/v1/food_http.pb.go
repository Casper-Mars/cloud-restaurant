// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type FoodHTTPServer interface {
	Add(context.Context, *AddFoodReq) (*FoodModifyResp, error)
	Page(context.Context, *OnePageFoodListReq) (*FoodListResp, error)
	Update(context.Context, *UpdateFoodReq) (*FoodModifyResp, error)
}

func RegisterFoodHTTPServer(s *http.Server, srv FoodHTTPServer) {
	r := s.Route("/")
	r.POST("/food", _Food_Add0_HTTP_Handler(srv))
	r.PUT("/food", _Food_Update0_HTTP_Handler(srv))
	r.GET("/food/page", _Food_Page0_HTTP_Handler(srv))
}

func _Food_Add0_HTTP_Handler(srv FoodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddFoodReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/food.v1.Food/Add")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddFoodReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FoodModifyResp)
		return ctx.Result(200, reply)
	}
}

func _Food_Update0_HTTP_Handler(srv FoodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFoodReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/food.v1.Food/Update")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*UpdateFoodReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FoodModifyResp)
		return ctx.Result(200, reply)
	}
}

func _Food_Page0_HTTP_Handler(srv FoodHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OnePageFoodListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/food.v1.Food/Page")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Page(ctx, req.(*OnePageFoodListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FoodListResp)
		return ctx.Result(200, reply)
	}
}

type FoodHTTPClient interface {
	Add(ctx context.Context, req *AddFoodReq, opts ...http.CallOption) (rsp *FoodModifyResp, err error)
	Page(ctx context.Context, req *OnePageFoodListReq, opts ...http.CallOption) (rsp *FoodListResp, err error)
	Update(ctx context.Context, req *UpdateFoodReq, opts ...http.CallOption) (rsp *FoodModifyResp, err error)
}

type FoodHTTPClientImpl struct {
	cc *http.Client
}

func NewFoodHTTPClient(client *http.Client) FoodHTTPClient {
	return &FoodHTTPClientImpl{client}
}

func (c *FoodHTTPClientImpl) Add(ctx context.Context, in *AddFoodReq, opts ...http.CallOption) (*FoodModifyResp, error) {
	var out FoodModifyResp
	pattern := "/food"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/food.v1.Food/Add"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FoodHTTPClientImpl) Page(ctx context.Context, in *OnePageFoodListReq, opts ...http.CallOption) (*FoodListResp, error) {
	var out FoodListResp
	pattern := "/food/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/food.v1.Food/Page"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FoodHTTPClientImpl) Update(ctx context.Context, in *UpdateFoodReq, opts ...http.CallOption) (*FoodModifyResp, error) {
	var out FoodModifyResp
	pattern := "/food"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/food.v1.Food/Update"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
