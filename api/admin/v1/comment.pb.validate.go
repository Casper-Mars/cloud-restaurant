// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/admin/v1/comment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CommentQueryReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CommentQueryReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUserName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentQueryReqValidationError{
				field:  "UserName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFoodName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentQueryReqValidationError{
				field:  "FoodName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentQueryReqValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetIndex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentQueryReqValidationError{
				field:  "Index",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentQueryReqValidationError{
				field:  "Size",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CommentQueryReqValidationError is the validation error returned by
// CommentQueryReq.Validate if the designated constraints aren't met.
type CommentQueryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentQueryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentQueryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentQueryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentQueryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentQueryReqValidationError) ErrorName() string { return "CommentQueryReqValidationError" }

// Error satisfies the builtin error interface
func (e CommentQueryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentQueryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentQueryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentQueryReqValidationError{}

// Validate checks the field values on CommentItem with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CommentItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for FoodId

	// no validation rules for FoodName

	// no validation rules for Comment

	return nil
}

// CommentItemValidationError is the validation error returned by
// CommentItem.Validate if the designated constraints aren't met.
type CommentItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentItemValidationError) ErrorName() string { return "CommentItemValidationError" }

// Error satisfies the builtin error interface
func (e CommentItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentItemValidationError{}

// Validate checks the field values on CommentQueryResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CommentQueryResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for Pages

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommentQueryRespValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CommentQueryRespValidationError is the validation error returned by
// CommentQueryResp.Validate if the designated constraints aren't met.
type CommentQueryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentQueryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentQueryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentQueryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentQueryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentQueryRespValidationError) ErrorName() string { return "CommentQueryRespValidationError" }

// Error satisfies the builtin error interface
func (e CommentQueryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentQueryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentQueryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentQueryRespValidationError{}
