// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CommentHTTPServer interface {
	AddComment(context.Context, *CommentAddReq) (*CommentModifyResp, error)
	ListComment(context.Context, *emptypb.Empty) (*ListCommentResp_ListCommentItem, error)
}

func RegisterCommentHTTPServer(s *http.Server, srv CommentHTTPServer) {
	r := s.Route("/")
	r.POST("/comment", _Comment_AddComment0_HTTP_Handler(srv))
	r.GET("/comment/list", _Comment_ListComment0_HTTP_Handler(srv))
}

func _Comment_AddComment0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommentAddReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/interface.v1.Comment/AddComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddComment(ctx, req.(*CommentAddReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommentModifyResp)
		return ctx.Result(200, reply)
	}
}

func _Comment_ListComment0_HTTP_Handler(srv CommentHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/interface.v1.Comment/ListComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListComment(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCommentResp_ListCommentItem)
		return ctx.Result(200, reply)
	}
}

type CommentHTTPClient interface {
	AddComment(ctx context.Context, req *CommentAddReq, opts ...http.CallOption) (rsp *CommentModifyResp, err error)
	ListComment(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *ListCommentResp_ListCommentItem, err error)
}

type CommentHTTPClientImpl struct {
	cc *http.Client
}

func NewCommentHTTPClient(client *http.Client) CommentHTTPClient {
	return &CommentHTTPClientImpl{client}
}

func (c *CommentHTTPClientImpl) AddComment(ctx context.Context, in *CommentAddReq, opts ...http.CallOption) (*CommentModifyResp, error) {
	var out CommentModifyResp
	pattern := "/comment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/interface.v1.Comment/AddComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommentHTTPClientImpl) ListComment(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*ListCommentResp_ListCommentItem, error) {
	var out ListCommentResp_ListCommentItem
	pattern := "/comment/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/interface.v1.Comment/ListComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
