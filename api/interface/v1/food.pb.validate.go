// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/interface/v1/food.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on AddFoodReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddFoodReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// AddFoodReqValidationError is the validation error returned by
// AddFoodReq.Validate if the designated constraints aren't met.
type AddFoodReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFoodReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFoodReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFoodReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFoodReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFoodReqValidationError) ErrorName() string { return "AddFoodReqValidationError" }

// Error satisfies the builtin error interface
func (e AddFoodReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFoodReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFoodReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFoodReqValidationError{}

// Validate checks the field values on FoodModifyResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FoodModifyResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// FoodModifyRespValidationError is the validation error returned by
// FoodModifyResp.Validate if the designated constraints aren't met.
type FoodModifyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FoodModifyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FoodModifyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FoodModifyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FoodModifyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FoodModifyRespValidationError) ErrorName() string { return "FoodModifyRespValidationError" }

// Error satisfies the builtin error interface
func (e FoodModifyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFoodModifyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FoodModifyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FoodModifyRespValidationError{}

// Validate checks the field values on FoodList with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FoodList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FoodListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FoodListValidationError is the validation error returned by
// FoodList.Validate if the designated constraints aren't met.
type FoodListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FoodListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FoodListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FoodListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FoodListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FoodListValidationError) ErrorName() string { return "FoodListValidationError" }

// Error satisfies the builtin error interface
func (e FoodListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFoodList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FoodListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FoodListValidationError{}

// Validate checks the field values on FoodList_FoodListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FoodList_FoodListItem) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// FoodList_FoodListItemValidationError is the validation error returned by
// FoodList_FoodListItem.Validate if the designated constraints aren't met.
type FoodList_FoodListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FoodList_FoodListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FoodList_FoodListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FoodList_FoodListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FoodList_FoodListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FoodList_FoodListItemValidationError) ErrorName() string {
	return "FoodList_FoodListItemValidationError"
}

// Error satisfies the builtin error interface
func (e FoodList_FoodListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFoodList_FoodListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FoodList_FoodListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FoodList_FoodListItemValidationError{}
