// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FoodClient is the client API for Food service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodClient interface {
	AddFood(ctx context.Context, in *AddFoodReq, opts ...grpc.CallOption) (*FoodModifyResp, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FoodList, error)
}

type foodClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodClient(cc grpc.ClientConnInterface) FoodClient {
	return &foodClient{cc}
}

func (c *foodClient) AddFood(ctx context.Context, in *AddFoodReq, opts ...grpc.CallOption) (*FoodModifyResp, error) {
	out := new(FoodModifyResp)
	err := c.cc.Invoke(ctx, "/interface.v1.Food/AddFood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FoodList, error) {
	out := new(FoodList)
	err := c.cc.Invoke(ctx, "/interface.v1.Food/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodServer is the server API for Food service.
// All implementations must embed UnimplementedFoodServer
// for forward compatibility
type FoodServer interface {
	AddFood(context.Context, *AddFoodReq) (*FoodModifyResp, error)
	List(context.Context, *emptypb.Empty) (*FoodList, error)
	mustEmbedUnimplementedFoodServer()
}

// UnimplementedFoodServer must be embedded to have forward compatible implementations.
type UnimplementedFoodServer struct {
}

func (UnimplementedFoodServer) AddFood(context.Context, *AddFoodReq) (*FoodModifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFood not implemented")
}
func (UnimplementedFoodServer) List(context.Context, *emptypb.Empty) (*FoodList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFoodServer) mustEmbedUnimplementedFoodServer() {}

// UnsafeFoodServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodServer will
// result in compilation errors.
type UnsafeFoodServer interface {
	mustEmbedUnimplementedFoodServer()
}

func RegisterFoodServer(s grpc.ServiceRegistrar, srv FoodServer) {
	s.RegisterService(&Food_ServiceDesc, srv)
}

func _Food_AddFood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFoodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServer).AddFood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.v1.Food/AddFood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServer).AddFood(ctx, req.(*AddFoodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Food_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interface.v1.Food/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Food_ServiceDesc is the grpc.ServiceDesc for Food service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Food_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interface.v1.Food",
	HandlerType: (*FoodServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFood",
			Handler:    _Food_AddFood_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Food_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/interface/v1/food.proto",
}
